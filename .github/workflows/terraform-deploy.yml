# TERRAFORM DEPLOYMENT WORKFLOW
# Automated Infrastructure as Code deployment with security and compliance

name: 'Terraform Infrastructure Deployment'

on:
  push:
    branches:
      - main
    paths:
      - 'terraform/**'
  pull_request:
    branches:
      - main
    paths:
      - 'terraform/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      action:
        description: 'Terraform action'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy
      force:
        description: 'Force apply (skip approval)'
        required: false
        default: false
        type: boolean

env:
  TF_VERSION: '1.6.0'
  TF_LOG: INFO
  TERRAFORM_CLOUD_TOKENS: ${{ secrets.TERRAFORM_CLOUD_TOKENS }}

jobs:
  #============================================================================
  # SECURITY AND VALIDATION
  #============================================================================
  
  security-scan:
    name: 'Security Scan'
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: 'Terraform Security Scan with Checkov'
        uses: bridgecrewio/checkov-action@master
        with:
          directory: terraform/
          quiet: true
          soft_fail: false
          framework: terraform
          output_format: sarif
          output_file_path: checkov-results.sarif
          
      - name: 'Upload Security Scan Results'
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: checkov-results.sarif
          
      - name: 'Terraform Cost Estimation'
        uses: infracost/infracost-gh-action@master
        with:
          api-key: ${{ secrets.INFRACOST_API_KEY }}
          path: terraform/
          github-token: ${{ secrets.GITHUB_TOKEN }}

  #============================================================================
  # DEVELOPMENT ENVIRONMENT
  #============================================================================
  
  terraform-development:
    name: 'Terraform Development'
    runs-on: ubuntu-latest
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'development')
    environment: development
    
    defaults:
      run:
        working-directory: terraform
        
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: 'Configure Google Cloud Credentials'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS_DEV }}
          
      - name: 'Terraform Init'
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET_DEV }}" \
            -backend-config="prefix=terraform/development"
            
      - name: 'Terraform Workspace'
        run: |
          terraform workspace select development || terraform workspace new development
          
      - name: 'Terraform Validate'
        run: terraform validate
        
      - name: 'Terraform Plan'
        run: |
          terraform plan \
            -var-file="environments/development/terraform.tfvars" \
            -out=tfplan \
            -detailed-exitcode
            
      - name: 'Terraform Apply'
        if: |
          github.event_name == 'push' || 
          (github.event_name == 'workflow_dispatch' && 
           github.event.inputs.action == 'apply' && 
           github.event.inputs.environment == 'development')
        run: terraform apply tfplan
        
      - name: 'Terraform Output'
        if: success()
        run: |
          terraform output -json > terraform-outputs-dev.json
          
      - name: 'Upload Terraform Outputs'
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-development
          path: terraform/terraform-outputs-dev.json
          retention-days: 30

  #============================================================================
  # STAGING ENVIRONMENT
  #============================================================================
  
  terraform-staging:
    name: 'Terraform Staging'
    runs-on: ubuntu-latest
    needs: [security-scan, terraform-development]
    if: |
      (github.ref == 'refs/heads/main' && github.event_name == 'push') ||
      (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    defaults:
      run:
        working-directory: terraform
        
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: 'Configure Google Cloud Credentials'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS_STAGING }}
          
      - name: 'Terraform Init'
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET_STAGING }}" \
            -backend-config="prefix=terraform/staging"
            
      - name: 'Terraform Workspace'
        run: |
          terraform workspace select staging || terraform workspace new staging
          
      - name: 'Terraform Plan'
        run: |
          terraform plan \
            -var-file="environments/staging/terraform.tfvars" \
            -out=tfplan \
            -detailed-exitcode
            
      - name: 'Terraform Apply'
        if: |
          github.event_name == 'push' || 
          (github.event_name == 'workflow_dispatch' && 
           github.event.inputs.action == 'apply' && 
           github.event.inputs.environment == 'staging')
        run: terraform apply tfplan
        
      - name: 'Infrastructure Health Check'
        if: success()
        run: |
          echo "Running infrastructure health checks..."
          # Add health check commands here
          
      - name: 'Terraform Output'
        if: success()
        run: |
          terraform output -json > terraform-outputs-staging.json
          
      - name: 'Upload Terraform Outputs'
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-staging
          path: terraform/terraform-outputs-staging.json
          retention-days: 30

  #============================================================================
  # PRODUCTION ENVIRONMENT
  #============================================================================
  
  terraform-production:
    name: 'Terraform Production'
    runs-on: ubuntu-latest
    needs: [security-scan, terraform-staging]
    if: |
      (github.event_name == 'workflow_dispatch' && 
       github.event.inputs.environment == 'production' &&
       github.event.inputs.action != 'destroy')
    environment: 
      name: production
      url: https://conference-party-app.com
    
    defaults:
      run:
        working-directory: terraform
        
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}
          
      - name: 'Configure Google Cloud Credentials'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS_PROD }}
          
      - name: 'Terraform Init'
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TERRAFORM_STATE_BUCKET_PROD }}" \
            -backend-config="prefix=terraform/production"
            
      - name: 'Terraform Workspace'
        run: |
          terraform workspace select production || terraform workspace new production
          
      - name: 'Terraform Plan'
        run: |
          terraform plan \
            -var-file="environments/production/terraform.tfvars" \
            -out=tfplan \
            -detailed-exitcode
            
      - name: 'Production Deployment Approval'
        if: github.event.inputs.force != 'true'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: 'devops-team,senior-engineers'
          minimum-approvals: 2
          issue-title: 'Production Infrastructure Deployment Approval'
          issue-body: |
            **Production Terraform Deployment**
            
            Please review the Terraform plan and approve if ready for production deployment.
            
            **Environment**: Production
            **Action**: Apply
            **Triggered by**: ${{ github.actor }}
            **Commit**: ${{ github.sha }}
            
            **⚠️ This will modify production infrastructure ⚠️**
            
        timeout-minutes: 60
        
      - name: 'Terraform Apply'
        if: |
          success() &&
          (github.event.inputs.force == 'true' || 
           github.event.inputs.action == 'apply')
        run: terraform apply tfplan
        
      - name: 'Production Health Check'
        if: success()
        run: |
          echo "Running comprehensive production health checks..."
          # Add production health check commands
          
      - name: 'Terraform Output'
        if: success()
        run: |
          terraform output -json > terraform-outputs-production.json
          
      - name: 'Upload Terraform Outputs'
        if: success()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-outputs-production
          path: terraform/terraform-outputs-production.json
          retention-days: 90
          
      - name: 'Notify Success'
        if: success()
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: '🚀 Production infrastructure deployed successfully!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
          
      - name: 'Notify Failure'
        if: failure()
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: '❌ Production infrastructure deployment failed!'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  #============================================================================
  # DISASTER RECOVERY TESTING
  #============================================================================
  
  disaster-recovery-test:
    name: 'Disaster Recovery Test'
    runs-on: ubuntu-latest
    needs: [terraform-production]
    if: |
      github.event_name == 'workflow_dispatch' && 
      github.event.inputs.environment == 'production' &&
      github.event.inputs.action == 'apply'
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Setup Google Cloud CLI'
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS_PROD }}
          
      - name: 'Test Database Backup'
        run: |
          echo "Testing database backup functionality..."
          # Add database backup test commands
          
      - name: 'Test Disaster Recovery Failover'
        run: |
          echo "Testing disaster recovery failover procedures..."
          # Add DR test commands
          
      - name: 'Validate Recovery Time Objectives'
        run: |
          echo "Validating RTO/RPO compliance..."
          # Add RTO/RPO validation

  #============================================================================
  # CLEANUP AND REPORTING
  #============================================================================
  
  cleanup-and-report:
    name: 'Cleanup and Reporting'
    runs-on: ubuntu-latest
    if: always()
    needs: [terraform-development, terraform-staging, terraform-production]
    
    steps:
      - name: 'Generate Deployment Report'
        run: |
          echo "## 📊 Terraform Deployment Report" > deployment-report.md
          echo "**Date**: $(date)" >> deployment-report.md
          echo "**Triggered by**: ${{ github.actor }}" >> deployment-report.md
          echo "**Commit**: ${{ github.sha }}" >> deployment-report.md
          echo "" >> deployment-report.md
          echo "### Environment Status" >> deployment-report.md
          echo "- Development: ${{ needs.terraform-development.result }}" >> deployment-report.md
          echo "- Staging: ${{ needs.terraform-staging.result }}" >> deployment-report.md
          echo "- Production: ${{ needs.terraform-production.result }}" >> deployment-report.md
          
      - name: 'Upload Deployment Report'
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md
          retention-days: 90