# COMPREHENSIVE CI/CD DEPLOYMENT PIPELINE
# Enterprise-grade continuous integration and deployment with security, testing, and monitoring

name: 'Production CI/CD Pipeline'

on:
  push:
    branches: [main, develop, release/*]
  pull_request:
    branches: [main]
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for deployment'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      skip_tests:
        description: 'Skip test suite (emergency deployments only)'
        required: false
        default: false
        type: boolean
      force_deploy:
        description: 'Force deployment (skip quality gates)'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '22'
  PYTHON_VERSION: '3.11'
  REGISTRY: 'gcr.io'
  IMAGE_NAME: 'conference-party-app'
  SONAR_PROJECT_KEY: 'conference-party-microservice'

# Reusable environment configurations
jobs:
  #============================================================================
  # SETUP AND VALIDATION
  #============================================================================
  
  setup:
    name: 'Setup and Validation'
    runs-on: ubuntu-latest
    outputs:
      deploy_env: ${{ steps.determine-env.outputs.environment }}
      should_deploy: ${{ steps.determine-env.outputs.should_deploy }}
      version: ${{ steps.version.outputs.version }}
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 'Determine Deployment Environment'
        id: determine-env
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "environment=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.event_name }}" == "release" ]]; then
            echo "environment=production" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "environment=staging" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
            echo "environment=development" >> $GITHUB_OUTPUT
            echo "should_deploy=true" >> $GITHUB_OUTPUT
          else
            echo "environment=none" >> $GITHUB_OUTPUT
            echo "should_deploy=false" >> $GITHUB_OUTPUT
          fi
          
      - name: 'Generate Version'
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "release" ]]; then
            VERSION=${{ github.event.release.tag_name }}
          else
            VERSION="$(git describe --tags --always --dirty)-$(date +%Y%m%d%H%M%S)"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "🏷️ Version: $VERSION"

  #============================================================================
  # CODE QUALITY AND SECURITY
  #============================================================================
  
  code-quality:
    name: 'Code Quality Analysis'
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            functions/package-lock.json
            
      - name: 'Install Dependencies'
        run: |
          npm ci
          cd functions && npm ci
          
      - name: 'ESLint Analysis'
        run: |
          cd functions
          npm run lint -- --format=json --output-file=eslint-results.json
          
      - name: 'TypeScript Type Checking'
        run: |
          cd functions
          npm run build
          
      - name: 'SonarCloud Scan'
        continue-on-error: true
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=conference-party-app
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info
            -Dsonar.typescript.lcov.reportPaths=functions/coverage/lcov.info
            
      - name: 'Code Coverage Report'
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info,./functions/coverage/lcov.info
          flags: unittests
          name: codecov-umbrella

  security-scan:
    name: 'Security Scanning'
    runs-on: ubuntu-latest
    needs: setup
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: 'Install Dependencies'
        run: |
          npm ci
          cd functions && npm ci
          
      - name: 'Dependency Security Audit'
        run: |
          npm audit --audit-level=high || true
          cd functions && npm audit --audit-level=high || true
          
      - name: 'Snyk Security Scan'
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=package.json
          
      - name: 'Snyk Functions Security Scan'
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --file=functions/package.json
          
      - name: 'SAST with CodeQL'
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
          
      - name: 'CodeQL Analysis'
        uses: github/codeql-action/analyze@v2
        
      - name: 'Secret Scanning with TruffleHog'
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD

  #============================================================================
  # COMPREHENSIVE TESTING
  #============================================================================
  
  unit-tests:
    name: 'Unit Tests'
    runs-on: ubuntu-latest
    needs: setup
    if: github.event.inputs.skip_tests != 'true'
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json
          
      - name: 'Install Dependencies'
        run: |
          cd functions
          npm ci
          
      - name: 'Run Unit Tests'
        run: |
          cd functions
          npm run test:unit -- --coverage --watchAll=false
          
      - name: 'Upload Test Results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: unit-test-results
          path: functions/coverage/

  integration-tests:
    name: 'Integration Tests'
    runs-on: ubuntu-latest
    needs: [setup, unit-tests]
    if: github.event.inputs.skip_tests != 'true'
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: functions/package-lock.json
          
      - name: 'Install Dependencies'
        run: |
          cd functions
          npm ci
          
      - name: 'Setup Test Environment'
        run: |
          cp functions/.env.test.example functions/.env.test
          echo "DATABASE_URL=postgresql://postgres:test@localhost:5432/test" >> functions/.env.test
          
      - name: 'Run Integration Tests'
        run: |
          cd functions
          npm run test:integration
          
      - name: 'Upload Integration Test Results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: integration-test-results
          path: functions/test-results/

  e2e-tests:
    name: 'End-to-End Tests'
    runs-on: ubuntu-latest
    needs: [setup, integration-tests]
    if: needs.setup.outputs.deploy_env != 'production' && github.event.inputs.skip_tests != 'true'
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: 'Install Dependencies'
        run: |
          npm ci
          npx playwright install --with-deps chromium
          
      - name: 'Build Application'
        run: npm run build
        
      - name: 'Start Local Server'
        run: |
          npm run dev &
          sleep 30
          
      - name: 'Run E2E Tests'
        run: npx playwright test
        
      - name: 'Upload E2E Results'
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: test-results/

  performance-tests:
    name: 'Performance Tests'
    runs-on: ubuntu-latest
    needs: [setup, integration-tests]
    if: needs.setup.outputs.deploy_env == 'staging' || needs.setup.outputs.deploy_env == 'production'
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Setup K6'
        run: |
          sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
          echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
          sudo apt-get update
          sudo apt-get install k6
          
      - name: 'Run Performance Tests'
        run: |
          k6 run --out json=performance-results.json tests/performance/load-test.js
          
      - name: 'Performance Test Report'
        run: |
          echo "## Performance Test Results" >> $GITHUB_STEP_SUMMARY
          k6 run --quiet tests/performance/load-test.js | tail -20 >> $GITHUB_STEP_SUMMARY
          
      - name: 'Upload Performance Results'
        uses: actions/upload-artifact@v4
        with:
          name: performance-test-results
          path: performance-results.json

  #============================================================================
  # BUILD AND CONTAINERIZATION
  #============================================================================
  
  build:
    name: 'Build Application'
    runs-on: ubuntu-latest
    needs: [setup, code-quality, security-scan]
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Setup Node.js'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: |
            package-lock.json
            functions/package-lock.json
            
      - name: 'Install Dependencies'
        run: |
          npm ci
          cd functions && npm ci
          
      - name: 'Build Functions'
        run: |
          cd functions
          npm run build
          
      - name: 'Build PWA'
        run: npm run build
        
      - name: 'Generate Build Manifest'
        run: |
          echo "build_timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> build-manifest.json
          echo "version=${{ needs.setup.outputs.version }}" >> build-manifest.json
          echo "commit_sha=${{ github.sha }}" >> build-manifest.json
          echo "branch=${{ github.ref_name }}" >> build-manifest.json
          
      - name: 'Upload Build Artifacts'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            functions/lib/
            public/
            build-manifest.json
          retention-days: 30

  docker-build:
    name: 'Docker Build and Push'
    runs-on: ubuntu-latest
    needs: [setup, build, unit-tests]
    if: needs.setup.outputs.should_deploy == 'true'
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Download Build Artifacts'
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          
      - name: 'Setup Docker Buildx'
        uses: docker/setup-buildx-action@v3
        
      - name: 'Configure GCP Authentication'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS }}
          
      - name: 'Configure Docker for GCR'
        run: gcloud auth configure-docker
        
      - name: 'Build and Push Docker Image'
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ secrets.GOOGLE_CLOUD_PROJECT }}/${{ env.IMAGE_NAME }}:${{ needs.setup.outputs.version }}
            ${{ env.REGISTRY }}/${{ secrets.GOOGLE_CLOUD_PROJECT }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64
          
      - name: 'Container Security Scan'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ secrets.GOOGLE_CLOUD_PROJECT }}/${{ env.IMAGE_NAME }}:${{ needs.setup.outputs.version }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: 'Upload Security Scan Results'
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  #============================================================================
  # DEPLOYMENT ORCHESTRATION
  #============================================================================
  
  deploy-development:
    name: 'Deploy to Development'
    runs-on: ubuntu-latest
    needs: [setup, build, unit-tests, docker-build]
    if: needs.setup.outputs.deploy_env == 'development'
    environment: 
      name: development
      url: https://conference-party-app-dev.web.app
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Download Build Artifacts'
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          
      - name: 'Configure GCP Authentication'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS_DEV }}
          
      - name: 'Deploy Firebase Functions'
        run: |
          cd functions
          npm ci
          npx firebase deploy --only functions --project ${{ secrets.FIREBASE_PROJECT_DEV }}
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS_DEV }}
          
      - name: 'Deploy Firebase Hosting'
        run: |
          npx firebase deploy --only hosting --project ${{ secrets.FIREBASE_PROJECT_DEV }}
          
      - name: 'Update Infrastructure'
        if: contains(github.event.head_commit.modified, 'terraform/')
        run: |
          cd terraform
          ./scripts/deploy.sh -e development -a apply --auto-approve
          
      - name: 'Health Check'
        run: |
          sleep 30
          curl -f https://conference-party-app-dev.web.app/api/health || exit 1
          
      - name: 'Deployment Notification'
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: '🚀 Development deployment completed'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  deploy-staging:
    name: 'Deploy to Staging'
    runs-on: ubuntu-latest
    needs: [setup, build, integration-tests, docker-build, deploy-development]
    if: needs.setup.outputs.deploy_env == 'staging' || needs.setup.outputs.deploy_env == 'production'
    environment: 
      name: staging
      url: https://conference-party-app-staging.web.app
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Download Build Artifacts'
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          
      - name: 'Configure GCP Authentication'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS_STAGING }}
          
      - name: 'Deploy Firebase Functions'
        run: |
          cd functions
          npm ci
          npx firebase deploy --only functions --project ${{ secrets.FIREBASE_PROJECT_STAGING }}
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS_STAGING }}
          
      - name: 'Deploy Firebase Hosting'
        run: |
          npx firebase deploy --only hosting --project ${{ secrets.FIREBASE_PROJECT_STAGING }}
          
      - name: 'Update Infrastructure'
        if: contains(github.event.head_commit.modified, 'terraform/')
        run: |
          cd terraform
          ./scripts/deploy.sh -e staging -a apply --auto-approve
          
      - name: 'Staging Health Check'
        run: |
          sleep 45
          curl -f https://conference-party-app-staging.web.app/api/health || exit 1
          
      - name: 'Smoke Tests'
        run: |
          npx playwright test --config=playwright.staging.config.js
          
      - name: 'Performance Baseline'
        run: |
          k6 run --quiet tests/performance/staging-baseline.js

  deploy-production:
    name: 'Deploy to Production'
    runs-on: ubuntu-latest
    needs: [setup, build, integration-tests, e2e-tests, performance-tests, docker-build, deploy-staging]
    if: needs.setup.outputs.deploy_env == 'production' && (github.event.inputs.force_deploy == 'true' || github.event_name == 'release')
    environment: 
      name: production
      url: https://conference-party-app.web.app
    
    steps:
      - name: 'Production Deployment Approval'
        if: github.event.inputs.force_deploy != 'true'
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.TOKEN }}
          approvers: 'production-deployers'
          minimum-approvals: 2
          issue-title: '🚀 Production Deployment Approval Required'
          issue-body: |
            **Production Deployment Request**
            
            **Version**: ${{ needs.setup.outputs.version }}
            **Environment**: Production
            **Triggered by**: ${{ github.actor }}
            **Commit**: ${{ github.sha }}
            
            **Test Results**:
            - Unit Tests: ✅ Passed
            - Integration Tests: ✅ Passed  
            - E2E Tests: ✅ Passed
            - Performance Tests: ✅ Passed
            - Security Scans: ✅ Passed
            
            **⚠️ This will deploy to LIVE PRODUCTION ⚠️**
        timeout-minutes: 30
        
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Download Build Artifacts'
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts
          
      - name: 'Configure GCP Authentication'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS_PROD }}
          
      - name: 'Pre-deployment Backup'
        run: |
          cd terraform
          ./scripts/backup.sh -e production
          
      - name: 'Blue-Green Deployment Setup'
        run: |
          echo "Implementing blue-green deployment strategy..."
          # Implementation would manage traffic routing
          
      - name: 'Deploy Firebase Functions'
        run: |
          cd functions
          npm ci
          npx firebase deploy --only functions --project ${{ secrets.FIREBASE_PROJECT_PROD }}
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS_PROD }}
          
      - name: 'Deploy Firebase Hosting'
        run: |
          npx firebase deploy --only hosting --project ${{ secrets.FIREBASE_PROJECT_PROD }}
          
      - name: 'Update Infrastructure'
        if: contains(github.event.head_commit.modified, 'terraform/')
        run: |
          cd terraform
          ./scripts/deploy.sh -e production -a apply --auto-approve
          
      - name: 'Production Health Check'
        run: |
          sleep 60
          curl -f https://conference-party-app.web.app/api/health || exit 1
          
      - name: 'Production Smoke Tests'
        run: |
          npx playwright test --config=playwright.production.config.js
          
      - name: 'Traffic Switch'
        run: |
          echo "Switching 100% traffic to new deployment..."
          # Implementation would complete blue-green switch
          
      - name: 'Post-deployment Verification'
        run: |
          sleep 120
          npm run test:production-health
          
      - name: 'Success Notification'
        uses: 8398a7/action-slack@v3
        with:
          status: success
          text: |
            🎉 **PRODUCTION DEPLOYMENT SUCCESSFUL** 🎉
            
            **Version**: ${{ needs.setup.outputs.version }}
            **Deployment Time**: $(date)
            **Deployed by**: ${{ github.actor }}
            
            **Live URL**: https://conference-party-app.web.app
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  #============================================================================
  # POST-DEPLOYMENT MONITORING
  #============================================================================
  
  post-deployment-monitoring:
    name: 'Post-Deployment Monitoring'
    runs-on: ubuntu-latest
    needs: [setup, deploy-production]
    if: always() && needs.setup.outputs.deploy_env == 'production'
    
    steps:
      - name: 'Setup Monitoring'
        run: |
          echo "Setting up enhanced monitoring for production deployment..."
          
      - name: 'Performance Monitoring'
        run: |
          echo "Monitoring performance metrics for 10 minutes..."
          sleep 600
          
      - name: 'Error Rate Monitoring'
        run: |
          echo "Checking error rates and alerting if elevated..."
          
      - name: 'User Experience Monitoring'
        run: |
          echo "Monitoring user experience metrics..."

  #============================================================================
  # ROLLBACK PROCEDURES
  #============================================================================
  
  rollback:
    name: 'Emergency Rollback'
    runs-on: ubuntu-latest
    if: failure() && needs.setup.outputs.deploy_env == 'production'
    needs: [setup, deploy-production]
    environment: production
    
    steps:
      - name: 'Checkout Code'
        uses: actions/checkout@v4
        
      - name: 'Configure GCP Authentication'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS_PROD }}
          
      - name: 'Execute Emergency Rollback'
        run: |
          echo "🚨 EXECUTING EMERGENCY ROLLBACK 🚨"
          cd terraform
          ./scripts/rollback.sh -e production --emergency
        env:
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_CLOUD_CREDENTIALS_PROD }}
          
      - name: 'Verify Rollback'
        run: |
          sleep 60
          curl -f https://conference-party-app.web.app/api/health || exit 1
          
      - name: 'Rollback Notification'
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          text: |
            🚨 **EMERGENCY ROLLBACK EXECUTED** 🚨
            
            Production deployment failed and was automatically rolled back.
            Please investigate immediately.
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  #============================================================================
  # REPORTING AND CLEANUP
  #============================================================================
  
  deployment-report:
    name: 'Generate Deployment Report'
    runs-on: ubuntu-latest
    if: always()
    needs: [setup, code-quality, security-scan, unit-tests, integration-tests, e2e-tests, build, deploy-development, deploy-staging, deploy-production]
    
    steps:
      - name: 'Generate Comprehensive Report'
        run: |
          cat > deployment-report.md << EOF
          # 📊 CI/CD Pipeline Report
          
          **Date**: $(date)
          **Version**: ${{ needs.setup.outputs.version }}
          **Environment**: ${{ needs.setup.outputs.deploy_env }}
          **Triggered by**: ${{ github.actor }}
          **Commit**: ${{ github.sha }}
          
          ## 🎯 Pipeline Results
          
          | Stage | Status |
          |-------|--------|
          | Code Quality | ${{ needs.code-quality.result }} |
          | Security Scan | ${{ needs.security-scan.result }} |
          | Unit Tests | ${{ needs.unit-tests.result }} |
          | Integration Tests | ${{ needs.integration-tests.result }} |
          | E2E Tests | ${{ needs.e2e-tests.result }} |
          | Build | ${{ needs.build.result }} |
          | Development Deploy | ${{ needs.deploy-development.result }} |
          | Staging Deploy | ${{ needs.deploy-staging.result }} |
          | Production Deploy | ${{ needs.deploy-production.result }} |
          
          ## 🔗 Links
          - [Live Application](https://conference-party-app.web.app)
          - [Monitoring Dashboard](https://console.cloud.google.com/monitoring)
          - [Logs](https://console.cloud.google.com/logs)
          EOF
          
      - name: 'Upload Deployment Report'
        uses: actions/upload-artifact@v4
        with:
          name: deployment-report
          path: deployment-report.md
          retention-days: 90