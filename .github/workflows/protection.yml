name: Branch Protection & Security

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  contents: read
  security-events: write
  pull-requests: write

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      
      - name: Install dependencies
        run: |
          npm ci
          cd functions && npm ci
      
      - name: Security audit
        run: |
          npm audit --audit-level=high
          cd functions && npm audit --audit-level=high
      
      - name: CodeQL Analysis
        uses: github/codeql-action/init@v2
        with:
          languages: javascript, typescript
      
      - name: Run CodeQL Analysis
        uses: github/codeql-action/analyze@v2

  build-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          
      - name: Install dependencies
        run: |
          npm ci
          cd functions && npm ci
          
      - name: Lint code
        run: |
          npm run lint || true
          cd functions && npm run lint
          
      - name: Type check
        run: |
          cd functions && npm run build
          
      - name: Run tests
        run: |
          npm test
          cd functions && npm test
          
      - name: Build PWA
        run: npm run build
        
      - name: Security headers check
        run: |
          echo "Checking security headers..."
          grep -r "Content-Security-Policy\|X-Frame-Options\|X-Content-Type-Options" public/ || echo "Security headers should be configured"

  deploy-staging:
    needs: [security-scan, build-test]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          
      - name: Install dependencies
        run: |
          npm ci
          cd functions && npm ci
          
      - name: Build production
        run: |
          npm run build
          cd functions && npm run build
          
      - name: Deploy to staging
        uses: FirebaseExtended/action-hosting-deploy@v0
        with:
          repoToken: ${{ secrets.GITHUB_TOKEN }}
          firebaseServiceAccount: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
          channelId: staging
          
  performance-test:
    needs: deploy-staging
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v9
        with:
          urls: |
            https://conference-party-app--staging.web.app
          uploadArtifacts: true
          temporaryPublicStorage: true
          
      - name: API Health Check
        run: |
          curl -f https://us-central1-conference-party-app.cloudfunctions.net/api/health || exit 1